@page
@model NapocaBike.Pages.BikeRentalLocations.IndexModel

@{
    ViewData["Title"] = "Admin Dashboard: Bike Rental Locations Management";
}

<head>
    <style>

        body {
            font-family: 'Poppins', sans-serif;
        }

        .btn-primary {
            color: #fff;
            background-color: #D9AF32;
            border-color: #D9AF32;
        }

            .btn-primary:hover {
                background-color: #F25050;
                border-color: #F25050;
            }

        a {
            color: #D9AF32;
            text-decoration: none;
            font-weight: 600;
        }

            a:hover {
                color: #F25050;
                text-decoration: none;
            }


        #map {
            margin-bottom: 20px;
            background-color: #f8f9fa;
            border-radius: 10px;
            box-shadow: 0 1px 3px rgba(0,0,0,.05), 0 1px 2px rgba(0,0,0,.1);
        }

        .form-group {
            margin-bottom: 1rem;
        }

        .form-control {
            display: block;
            width: 100%;
            padding: .375rem .75rem;
            font-size: 1rem;
            line-height: 1.5;
            color: #495057;
            background-color: #fff;
            background-clip: padding-box;
            border: 1px solid #ced4da;
            border-radius: .25rem;
            transition: border-color .15s ease-in-out,box-shadow .15s ease-in-out;
            margin-bottom: 5px;
        }

        table {
            width: 100%;
            margin-top: 20px;
            border-collapse: collapse;
        }

        th, td {
            border: 1px solid #ddd;
            padding: 8px;
        }

        th {
            padding-top: 12px;
            padding-bottom: 12px;
            text-align: left;
            background-color: #D9AF32;
            color: white;
        }

        tr:hover {
            background-color: #f5f5f5;
        }
    </style>
</head>

<body>
    <h1>Admin Dashboard: Bike Rental Locations Management</h1>

    <div id="map" style="height:400px;"></div>

    <table class="table">
        <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.BikeRentalLocation[0].Name)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.BikeRentalLocation[0].EmptySpaces)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.BikeRentalLocation[0].BikesAvailable)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.BikeRentalLocation[0].Adress)
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model.BikeRentalLocation)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.Name)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.EmptySpaces)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.BikesAvailable)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Adress)
                    </td>
                    <td>
                        <a asp-page="./Edit" asp-route-id="@item.Id">Edit</a> |
                        <a asp-page="./Delete" asp-route-id="@item.Id">Delete</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <div>
        <a asp-page="/BikeRentalLocationsList">Back to Main page</a>
    </div>
</body>

@section Scripts {
    <script>
        async function geocodeAddress(address) {
            const geocoder = new google.maps.Geocoder();
            return new Promise((resolve, reject) => {
                geocoder.geocode({
                    address: address,
                    componentRestrictions: {
                        country: 'RO',
                        locality: 'Cluj-Napoca'
                    }
                }, (results, status) => {
                    if (status === google.maps.GeocoderStatus.OK) {
                        const lat = results[0].geometry.location.lat();
                        const lng = results[0].geometry.location.lng();
                        resolve({ lat, lng });
                    } else {
                        reject(status);
                    }
                });
            });
        }

        var currentLocationMarker;
        async function initMap() {
            map = new google.maps.Map(document.getElementById("map"), {
                center: { lat: 46.770439, lng: 23.591423 },
                zoom: 13,
                mapId: 'fd46ebf30d389dd2',
                disableDefaultUI: true, // Disable default UI controls
                mapTypeControl: false, // Remove map type control (e.g., satellite mode)
                streetViewControl: false, // Remove street view control
                fullscreenControl: true, // Remove fullscreen control
                zoomControl: true // Enable zoom control
            });
            directionsService = new google.maps.DirectionsService();
            directionsRenderer = new google.maps.DirectionsRenderer({
                suppressMarkers: true,
                polylineOptions: {
                    strokeColor: '#F2CA50', // Main color of the route line
                    strokeOpacity: 0.8, // Opacity of the route line (0.0 - 1.0)
                    strokeWeight: 6, // Thickness of the route line
                    icons: [
                        {
                            icon: {
                                path: 'M 0,-1 0,1',
                                strokeColor: '#F25757',
                                strokeOpacity: 0.8,
                                strokeWeight: 2,
                            },
                            offset: '0',
                            repeat: '10px',
                        },
                        {
                            icon: {
                                path: 'M 0,-1 0,1',
                                strokeColor: '#F2CA50',
                                strokeOpacity: 0.8,
                                strokeWeight: 2,
                            },
                            offset: '5px',
                            repeat: '20px',
                        },
                    ],
                },
            });
            directionsRenderer.setMap(map);

            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(showPosition);
            } else {
                alert("Geolocation is not supported by this browser.");
            }
            const locations = @Html.Raw(Json.Serialize(Model.BikeRentalLocation));

            for (const location of locations) {
                try {
                    const position = await geocodeAddress(location.name);

                    const marker = new google.maps.Marker({
                        position,
                        map,
                        title: location.name,
                        icon: {
                            url: "/icons/pin1.png",
                            scaledSize: new google.maps.Size(32, 32)
                        },
                    });

                    const infowindow = new google.maps.InfoWindow({
                        content: `
                                            <div>
                                                <h3>${location.name}</h3>
                                                <p>Empty Spaces: ${location.emptySpaces}</p>
                                                <p>Bikes Available: ${location.bikesAvailable}</p>
                                                <p>Address: ${location.adress}</p>
                                            </div>
                                        `,
                    });

                    marker.addListener("click", () => {
                        infowindow.open(map, marker);
                        calculateAndDisplayRoute(directionsService, directionsRenderer, currentLocationMarker.getPosition(), marker.getPosition());

                    });

                    markers.push(marker);
                } catch (error) {
                    console.error(`Geocoding failed for address: ${location.adress}, reason: ${error}`);
                }
            }

            function showPosition(position) {
                var lat = position.coords.latitude;
                var lng = position.coords.longitude;

                currentLocationMarker = new google.maps.Marker({
                    position: { lat: lat, lng: lng },
                    map: map,
                    icon: {
                        url: "/Icons/bike.png",
                        scaledSize: new google.maps.Size(32, 32) // specify the size of the icon
                    },
                    title: "Your Current Location"
                });

                map.setCenter({ lat: lat, lng: lng });
                map.setZoom(15);
            }
        }
        function calculateAndDisplayRoute(directionsService, directionsRenderer, origin, destination) {
            // First, try the BICYCLING travel mode
            directionsService.route(
                {
                    origin: origin,
                    destination: destination,
                    travelMode: google.maps.TravelMode.BICYCLING
                },
                (response, status) => {
                    if (status === google.maps.DirectionsStatus.OK) {
                        directionsRenderer.setDirections(response);
                    } else {
                        // If BICYCLING is not available, fall back to WALKING
                        directionsService.route(
                            {
                                origin: origin,
                                destination: destination,
                                travelMode: google.maps.TravelMode.WALKING
                            },
                            (response, status) => {
                                if (status === google.maps.DirectionsStatus.OK) {
                                    directionsRenderer.setDirections(response);
                                } else {
                                    window.alert('Directions request failed due to ' + status);
                                }
                            }
                        );
                    }
                }
            );
        }
    </script>



    <script src="~/GoogleMapsApiProxy" async defer></script>
}
