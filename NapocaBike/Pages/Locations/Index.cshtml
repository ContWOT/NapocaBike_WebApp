@page
@model NapocaBike.Pages.Locations.IndexModel

@{
    ViewData["Title"] = "Locations list ";
}
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700;800;900&display=swap" rel="stylesheet">
    <style>
        /* Shared styles across both pages */
        body {
            font-family: 'Poppins', sans-serif;
        }

        .btn-primary {
            color: #fff;
            background-color: #D9AF32;
            border-color: #D9AF32;
        }

            .btn-primary:hover {
                background-color: #F25050;
                border-color: #F25050;
            }

        a {
            color: #D9AF32;
            text-decoration: none;
            font-weight: 600;
        }

            a:hover {
                color: #F25050;
                text-decoration: none;
            }

        /* Index page specific styles */
        #map {
            margin-bottom: 20px;
            background-color: #f8f9fa;
            border-radius: 10px;
            box-shadow: 0 1px 3px rgba(0,0,0,.05), 0 1px 2px rgba(0,0,0,.1);
        }

        .form-group {
            margin-bottom: 1rem;
        }

        .form-control {
            display: block;
            width: 100%;
            padding: .375rem .75rem;
            font-size: 1rem;
            line-height: 1.5;
            color: #495057;
            background-color: #fff;
            background-clip: padding-box;
            border: 1px solid #ced4da;
            border-radius: .25rem;
            transition: border-color .15s ease-in-out,box-shadow .15s ease-in-out;
            margin-bottom: 5px;
        }

        table {
            width: 100%;
            margin-top: 20px;
            border-collapse: collapse;
        }

        th, td {
            border: 1px solid #ddd;
            padding: 8px;
        }

        th {
            padding-top: 12px;
            padding-bottom: 12px;
            text-align: left;
            background-color: #D9AF32;
            color: white;
        }

        tr:hover {
            background-color: #f5f5f5;
        }
    </style>
</head>
<body>
    <h1>Admin Dashboard: Locations Management</h1>

<p>
    <a asp-page="Create">Create New</a>
</p>


<form method="get">
    <div class="form-group">
        <label>Category:</label>
        <select name="CategoryFilter" class="form-control">
            <option value="">-- Select Category --</option>
            @{
                foreach (var category in Model.LocationD.Categories)
                {
                    <option value="@category.ID" selected="@(Model.CategoryFilter == category.ID)">@category.CategoryName</option>
                }
            }
        </select>
    </div>
    <div class="form-group">
        <button type="submit" class="btn btn-primary">Filter</button>
        <a asp-page="./Index" class="btn btn-secondary ml-2">Clear</a>
    </div>
</form>

<div id="map" style="height:400px;"></div>


<table class="table">
    
    <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.Location[0].Name)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Location[0].Adress)
                </th>

                <th>
                    @Html.DisplayNameFor(model => model.Location[0].Program)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Location[0].Phone)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Location[0].Email)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Location[0].Website)
                </th>

                <th>
                    @Html.DisplayNameFor(model => model.Location[0].CompanyRegistrationNumber)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Location[0].Latitude)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Location[0].Longitude)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Location[0].LocationCategories)
                </th>

                <th></th>
            </tr>
    </thead>

        <tbody>
            @foreach (var item in Model.LocationD.Locations)
            {
                string selectedRow = "";
                if (item.ID == Model.LocationID)
                {
                    selectedRow = "table-success";
                }
                <tr class="@selectedRow">
                    <td>
                        @Html.DisplayFor(modelItem => item.Name)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Adress)
                    </td>

                    <td>
                        @Html.DisplayFor(modelItem => item.Program)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Phone)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Email)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Website)
                    </td>

                    <td>
                        @Html.DisplayFor(modelItem => item.CompanyRegistrationNumber)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Latitude)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Longitude)
                    </td>
                    <td>
                        @{
                            foreach (var category in item.LocationCategories)
                            {
                                @: @category.Category.CategoryName <br />
                            }
                        }
                    </td>
                    <td>
                        <a asp-page="./Edit" asp-route-id="@item.ID">Edit</a> |
                        <a asp-page="./Delete" asp-route-id="@item.ID">Delete</a>
                    </td>
                </tr>
            }
        </tbody>
</table>
    <div>
        <a asp-page="/LocationsList">Back to Main page</a>
    </div>
</body>
</html>

@section Scripts {
    <script>
        var map;
        var currentLocationMarker;
        let markers = [];







        function initMap() {
            map = new google.maps.Map(document.getElementById('map'), {
                center: { lat: 46.770439, lng: 23.591423 },
                zoom: 12,
                mapId: 'fd46ebf30d389dd2'
            });

            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(showPosition);
            } else {
                alert("Geolocation is not supported by this browser.");
            }

        @foreach (var item in Model.LocationD.Locations)
        {
            <text>
                    (function () {
                        const position = { lat: @item.Latitude, lng: @item.Longitude };

                        const marker = new google.maps.Marker({
                            position,
                            map,
                            title: '@item.Name',
                            icon: {
                                url: "/icons/pin3.png",
                                scaledSize: new google.maps.Size(32, 32)
                            },
                        });

                        const infowindow = new google.maps.InfoWindow({
                            content: `
                                                            <div>
                                                                <h3>@item.Name</h3>
                                                                <p>Address: @item.Adress</p>
                                                                <p>Program: @item.Program</p>
                                                                            <p>Category: @{
                            string concatenatedCategories = "";
                            foreach (var category in item.LocationCategories)
                            {
                                concatenatedCategories += category.Category.CategoryName + ", ";
                            }
                            concatenatedCategories = concatenatedCategories.Trim().TrimEnd(',');
                        }@concatenatedCategories</p>
                                                            </div>
                                                        `,
                        });

                        marker.addListener("click", () => {
                            infowindow.open(map, marker);
                        });

                        markers.push(marker);
                    })();
            </text>
        }

                }


        function showPosition(position) {
            var lat = position.coords.latitude;
            var lng = position.coords.longitude;

            currentLocationMarker = new google.maps.Marker({
                position: { lat: lat, lng: lng },
                map: map,
                icon: {
                    url: "/Icons/person.png",
                    scaledSize: new google.maps.Size(32, 32) 
                },
                title: "Your Current Location"
            });

            map.setCenter({ lat: lat, lng: lng });
            map.setZoom(15);
        }
    </script>
    <script src="~/GoogleMapsApiProxy" async defer></script>
}


