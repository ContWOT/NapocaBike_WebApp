@page
@model NapocaBike.Pages.BikeParkings.IndexModel

@{
    ViewData["Title"] = "Index";
}
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700;800;900&display=swap" rel="stylesheet">
    <style>
       
        body {
            font-family: 'Poppins', sans-serif;
        }

        .btn-primary {
            color: #fff;
            background-color: #D9AF32;
            border-color: #D9AF32;
        }

            .btn-primary:hover {
                background-color: #F25050;
                border-color: #F25050;
            }

        a {
            color: #D9AF32;
            text-decoration: none;
            font-weight: 600;
        }

            a:hover {
                color: #F25050;
                text-decoration: none;
            }

   
        #map {
            margin-bottom: 20px;
            background-color: #f8f9fa;
            border-radius: 10px;
            box-shadow: 0 1px 3px rgba(0,0,0,.05), 0 1px 2px rgba(0,0,0,.1);
        }

        .form-group {
            margin-bottom: 1rem;
        }

        .form-control {
            display: block;
            width: 100%;
            padding: .375rem .75rem;
            font-size: 1rem;
            line-height: 1.5;
            color: #495057;
            background-color: #fff;
            background-clip: padding-box;
            border: 1px solid #ced4da;
            border-radius: .25rem;
            transition: border-color .15s ease-in-out,box-shadow .15s ease-in-out;
            margin-bottom: 5px;
        }

        table {
            width: 100%;
            margin-top: 20px;
            border-collapse: collapse;
        }

        th, td {
            border: 1px solid #ddd;
            padding: 8px;
        }

        th {
            padding-top: 12px;
            padding-bottom: 12px;
            text-align: left;
            background-color: #D9AF32;
            color: white;
        }

        tr:hover {
            background-color: #f5f5f5;
        }
    </style>

</head>
<body>
    <h1>Admin Dashboard: Bike Parkings Management</h1>
    <p>
        <a asp-page="Create" class="btn btn-primary">Create New</a>
    </p>
    <div id="map" style="height:400px;"></div>
    <form method="get">
        <div class="form-group">
            <label>Capacity:</label>
            <input type="number" name="CapacityFilter" class="form-control" value="@Model.CapacityFilter" />
        </div>
        <div class="form-group">
            <label>SecurityLevel:</label>
            <input type="number" name="SecurityFilter" class="form-control" value="@Model.SecurityFilter" />
        </div>
        <div class="form-group">
            <button type="submit" class="btn btn-primary" asp-page-handler="filter">Filter</button>
            <a asp-page="./Index" class="btn btn-secondary ml-2">Clear</a>
        </div>
    </form>

    <table class="table">
        <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.BikeParking[0].Name)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.BikeParking[0].Latitude)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.BikeParking[0].Longitude)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.BikeParking[0].Capacity)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.BikeParking[0].SecurityLevel)
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model.BikeParking)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.Name)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Latitude)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Longitude)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Capacity)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.SecurityLevel)
                    </td>
                    <td>
                        <a asp-page="./Edit" asp-route-id="@item.ID">Edit</a> |
                        <a asp-page="./Delete" asp-route-id="@item.ID">Delete</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <div>
        <a asp-page="/BikeParkingsList">Back to Main page</a>
    </div>
</body>









@section Scripts {

    <script>
        var map;
        var currentLocationMarker;
        let markers = [];
        var directionsService;
        var directionsRenderer;

        function initMap() {
            map = new google.maps.Map(document.getElementById('map'), {
                center: { lat: 46.770439, lng: 23.591423 },
                zoom: 12,
                mapId: 'fd46ebf30d389dd2'
            });

            directionsService = new google.maps.DirectionsService();
            directionsRenderer = new google.maps.DirectionsRenderer({
                suppressMarkers: true,
                polylineOptions: {
                    strokeColor: 'black',
                    strokeOpacity: 1,
                    strokeWeight: 2,
                    icons: [{
                        icon: { path: google.maps.SymbolPath.CIRCLE, scale: 1 },
                        offset: '0',
                        repeat: '5px'
                    }]
                }
            });
            directionsRenderer.setMap(map);
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(showPosition);
            } else {
                alert("Geolocation is not supported by this browser.");
            }

        @foreach (var item in Model.BikeParking)
        {
            <text>
                    (function () {
                        const position = { lat: @item.Latitude, lng: @item.Longitude };

                        const marker = new google.maps.Marker({
                            position,
                            map,
                            title: '@item.Name',
                            icon: {
                                url: "/icons/pin2.png",
                                scaledSize: new google.maps.Size(32, 32)
                            }
                        });

                        const infowindow = new google.maps.InfoWindow({
                            content: `
                                    <div>
                                        <h3>@item.Name</h3>
                                        <p>Capacity: @item.Capacity</p>
                                        <p>Security Level: @item.SecurityLevel</p>
                                    </div>
                                `,
                        });

                        marker.addListener("click", () => {
                            infowindow.open(map, marker);
                            calculateAndDisplayRoute(directionsService, directionsRenderer, currentLocationMarker.getPosition(), marker.getPosition());
                        });

                        markers.push(marker);
                    })();
            </text>
        }
        }


        function showPosition(position) {
            var lat = position.coords.latitude;
            var lng = position.coords.longitude;

            currentLocationMarker = new google.maps.Marker({
                position: { lat: lat, lng: lng },
                map: map,
                icon: {
                    url: "/Icons/person.png",
                    scaledSize: new google.maps.Size(32, 32) // specify the size of the icon
                },
                title: "Your Current Location"
            });

            map.setCenter({ lat: lat, lng: lng });
            map.setZoom(15);
        }







        function calculateAndDisplayRoute(directionsService, directionsRenderer, origin, destination) {
            directionsService.route(
                {
                    origin: origin,
                    destination: destination,
                    travelMode: google.maps.TravelMode.WALKING
                },
                (response, status) => {
                    if (status === google.maps.DirectionsStatus.OK) {
                        directionsRenderer.setDirections(response);
                    } else {
                        window.alert('Directions request failed due to ' + status);
                    }
                }
            );
        }

        document.getElementById("filterByDistance").addEventListener("click", filterByDistance);
    </script>
    <script src="~/GoogleMapsApiProxy" async defer></script>
}