@page
@model NapocaBike.Pages.BikeParkings.IndexModel

@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>


<style>
    .navigation {
        display: flex;
        align-items: center;
    }

        .navigation .menu-item {
            position: relative;
            color: #000;
            text-decoration: none;
            font-weight: 600;
            letter-spacing: 1px;
            padding: 2px 15px;
            margin-right: 30px;
            transition: 0.3s;
            transition-property: background;
        }

            .navigation .menu-item:hover {
                background: #D9AF32;
                color: #fff;
            }

        .navigation .dropdown {
            position: relative;
        }

        .navigation .dropdown-menu {
            display: none;
            position: absolute;
            top: 100%;
            left: 0;
            background-color: #fff;
            padding: 10px 0;
            border-radius: 5px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.15);
        }

            .navigation .dropdown-menu a {
                display: block;
                padding: 5px 20px;
                color: #000;
                text-decoration: none;
                transition: 0.3s;
                transition-property: background, color;
            }

                .navigation .dropdown-menu a:hover {
                    background-color: #D9AF32;
                    color: #fff;
                }

        .navigation .dropdown:hover .dropdown-menu {
            display: block;
        }
</style>


<div class="navigation">
    <a asp-area="" asp-page="/LocationsList" class="menu-item">Locations</a>
    <a asp-area="" asp-page="/BikeParkingsList" class="menu-item">Parkings</a>
    <a asp-area="" asp-page="/RentalsList" class="menu-item">Rentals</a>


    <div class="menu-item dropdown">
        <a href="#" class="dropdown-toggle">Propose</a>
        <div class="dropdown-menu">
            <a asp-area="" asp-page="/Propose" class="menu-item">Parking</a>
            <a asp-area="" asp-page="/ProposeLocation" class="menu-item">Location</a>

        </div>
    </div>

    <div class="menu-item dropdown">
        <a href="#" class="dropdown-toggle">Admin</a>
        <div class="dropdown-menu">
            <a asp-area="" asp-page="/BikeRentalLocations/Index" class="dropdown-item ">AdminRentals</a>
            <a asp-area="" asp-page="/BikeParkings/Index" class="dropdown-item">AdminParkings</a>
            <a asp-area="" asp-page="/Locations/Index" class="dropdown-item">AdminLocations</a>
            <a asp-area="" asp-page="/Categories/Index" class="dropdown-item">Categories</a>
            <a asp-area="" asp-page="/Members/Index" class="dropdown-item">Members</a>

            <a asp-area="" asp-page="/ReviewProposals" class="menu-item">ReviewProposals</a>
        </div>
    </div>
    <div class="menu-item">
        @if (Model.CurrentMember != null && !string.IsNullOrEmpty(Model.CurrentMember.ProfilePicturePath))
        {
            <img id="login-btn" class="login-btn" src="@Model.CurrentMember.ProfilePicturePath" alt="Profile Picture" width="40" height="40" style="border-radius: 50%;" />
        }
        else
        {
            <a id="login-btn" class="login-btn">Login</a>
        }
    </div>



</div>
<p>
    <a asp-page="Create">Create New</a>
</p>


<div id="map" style="height:400px;"></div>

<form method="get">
    <div class="form-group">
        <label>Capacity:</label>
        <input type="number" name="CapacityFilter" class="form-control" value="@Model.CapacityFilter" />
    </div>
    <div class="form-group">
        <label>SecurityLevel:</label>
        <input type="number" name="SecurityFilter" class="form-control" value="@Model.SecurityFilter" />
    </div>
    <div class="form-group">
        <button type="submit" class="btn btn-primary" asp-page-handler="filter">Filter</button>
        <a asp-page="./Index" class="btn btn-secondary ml-2">Clear</a>
    </div>
</form>






<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.BikeParking[0].Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.BikeParking[0].Latitude)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.BikeParking[0].Longitude)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.BikeParking[0].Capacity)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.BikeParking[0].SecurityLevel)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.BikeParking)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Latitude)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Longitude)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Capacity)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.SecurityLevel)
                </td>
                <td>
                    <a asp-page="./Edit" asp-route-id="@item.ID">Edit</a> |
                    <a asp-page="./Delete" asp-route-id="@item.ID">Delete</a>
                </td>
            </tr>
        }
    </tbody>
</table>

@section Scripts {

    <script>
        var map;
        var currentLocationMarker;
        let markers = [];
        var directionsService;
        var directionsRenderer;

        function initMap() {
            map = new google.maps.Map(document.getElementById('map'), {
                center: { lat: 46.770439, lng: 23.591423 },
                zoom: 12
            });

            directionsService = new google.maps.DirectionsService();
            directionsRenderer = new google.maps.DirectionsRenderer({
                suppressMarkers: true,
                polylineOptions: {
                    strokeColor: 'black',
                    strokeOpacity: 1,
                    strokeWeight: 2,
                    icons: [{
                        icon: { path: google.maps.SymbolPath.CIRCLE, scale: 1 },
                        offset: '0',
                        repeat: '5px'
                    }]
                }
            });
            directionsRenderer.setMap(map);
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(showPosition);
            } else {
                alert("Geolocation is not supported by this browser.");
            }

        @foreach (var item in Model.BikeParking)
        {
            <text>
                    (function () {
                        const position = { lat: @item.Latitude, lng: @item.Longitude };

                        const marker = new google.maps.Marker({
                            position,
                            map,
                            title: '@item.Name',
                        });

                        const infowindow = new google.maps.InfoWindow({
                            content: `
                                    <div>
                                        <h3>@item.Name</h3>
                                        <p>Capacity: @item.Capacity</p>
                                        <p>Security Level: @item.SecurityLevel</p>
                                    </div>
                                `,
                        });

                        marker.addListener("click", () => {
                            infowindow.open(map, marker);
                            calculateAndDisplayRoute(directionsService, directionsRenderer, currentLocationMarker.getPosition(), marker.getPosition());
                        });

                        markers.push(marker);
                    })();
            </text>
        }
        }


        function showPosition(position) {
            var lat = position.coords.latitude;
            var lng = position.coords.longitude;

            currentLocationMarker = new google.maps.Marker({
                position: { lat: lat, lng: lng },
                map: map,
                icon: {
                    url: "/Icons/person.png",
                    scaledSize: new google.maps.Size(32, 32) // specify the size of the icon
                },
                title: "Your Current Location"
            });

            map.setCenter({ lat: lat, lng: lng });
            map.setZoom(15);
        }







        function calculateAndDisplayRoute(directionsService, directionsRenderer, origin, destination) {
            directionsService.route(
                {
                    origin: origin,
                    destination: destination,
                    travelMode: google.maps.TravelMode.WALKING
                },
                (response, status) => {
                    if (status === google.maps.DirectionsStatus.OK) {
                        directionsRenderer.setDirections(response);
                    } else {
                        window.alert('Directions request failed due to ' + status);
                    }
                }
            );
        }

        document.getElementById("filterByDistance").addEventListener("click", filterByDistance);
    </script>
    <script src="~/GoogleMapsApiProxy" async defer></script>
}